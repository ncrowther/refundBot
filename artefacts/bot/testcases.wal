Ü// Description
//	Test cases for the Travel Refund website.  
//
defVar --name ticket_number --type String
defVar --name payment_type --type String
defVar --name payment_value --type String
defVar --name success --type String
defVar --name result_code --type String
defVar --name result_desc --type String
defVar --name failureCount --type Numeric
defVar --name testCaseName --type String
defVar --name expectedValue --type String
defVar --name actualValue --type String
defVar --name botScriptPath --type String --value "D:\\RPA\\github\\refundBot\\artefacts\\bot"

onError --label evaluateException

testCase --id 1 --title "Test refunds" --description Refunds --category REFUNDS --result "Successful refunds"

goSub --label successfulCardRefund
goSub --label cashRefundNotAccepted
goSub --label invalidRefundAmount

logMessage --message "Unit tests completed with ${failureCount} failures" --type "Info"

beginSub --name successfulCardRefund

setVar --name "${testCaseName}" --value RefundCard

setVar --name "${ticket_number}" --value 567567
setVar --name "${payment_type}" --value Card
setVar --name "${payment_value}" --value 87

executeScript --name "${botScriptPath}\\Refunds_ProcessSingle.wal" --parameters "in_param_ticket=${ticket_number},in_param_paymentType=${payment_type},in_param_repaymentAmt=${payment_value}" --output "out_success=${success},out_code=${result_code},out_desc=${result_desc}"

setVar --name "${expectedValue}" --value 00
setVar --name "${actualValue}" --value "${result_code}"
assert --message "${testCaseName}" --left "${result_code}" --operator "Equal_To" --right "${expectedValue}"

endSub

beginSub --name cashRefundNotAccepted

setVar --name "${testCaseName}" --value CashRefundNotAccepted

setVar --name "${ticket_number}" --value 453445
setVar --name "${payment_type}" --value Cash
setVar --name "${payment_value}" --value 8

executeScript --name "D:\\RPA\\A_ENABLEMENT\\LABS\\public lab guides\\Lab 06 - Bot Design and Error Handling\\artefacts\\Refunds_ProcessSingle.wal" --parameters "in_param_ticket=${ticket_number},in_param_paymentType=${payment_type},in_param_repaymentAmt=${payment_value}" --output "out_success=${success},out_code=${result_code},out_desc=${result_desc}"

setVar --name "${expectedValue}" --value 02
setVar --name "${actualValue}" --value "${result_code}"
assert --message "${testCaseName}" --left "${result_code}" --operator "Equal_To" --right "${expectedValue}"

endSub

beginSub --name invalidRefundAmount

setVar --name "${testCaseName}" --value InvalidRefundAmount

setVar --name "${ticket_number}" --value 087877
setVar --name "${payment_type}" --value Card
setVar --name "${payment_value}" --value 870000

executeScript --name "D:\\RPA\\A_ENABLEMENT\\LABS\\public lab guides\\Lab 06 - Bot Design and Error Handling\\artefacts\\Refunds_ProcessSingle.wal" --parameters "in_param_ticket=${ticket_number},in_param_paymentType=${payment_type},in_param_repaymentAmt=${payment_value}" --output "out_success=${success},out_code=${result_code},out_desc=${result_desc}"

setVar --name "${expectedValue}" --value 03
setVar --name "${actualValue}" --value "${result_code}"
assert --message "${testCaseName}" --left "${result_code}" --operator "Equal_To" --right "${expectedValue}"

endSub


beginSub --name evaluateException
logMessage --message "Failed test ${testCaseName},  Expected value: ${expectedValue}, actual value: ${actualValue} " --type "Info"
incrementVar --number ${failureCount}
recover
endSub
*21.0.6.0