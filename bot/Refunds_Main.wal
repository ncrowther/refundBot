
	’W”y›³B’)…"¶%^¨‘SdefVar --name processPath --type String
defVar --name processFileName --type String --value "D:\\RPA\\github\\refundBot\\data\\refunds.xlsx"
defVar --name fileDataTable --type DataTable
defVar --name fileRowCount --type Numeric
defVar --name tableIndex --type Numeric --value 1
defVar --name ticket_number --type String
defVar --name excelFile --type Excel
defVar --name rpa_status --type String
defVar --name payment_type --type String
defVar --name payment_value --type String
defVar --name success --type Boolean
defVar --name error_code --type String
defVar --name error_desc --type String
defVar --name retVal --type Boolean
defVar --name stopwatch --type Stopwatch
defVar --name totalHours --type Numeric
defVar --name totalMinutes --type Numeric
defVar --name totalSeconds --type Numeric
defVar --name result_code --type String
defVar --name result_desc --type String
defVar --name totalRunTime --type TimeSpan
defVar --name timing_minutes --type Numeric
defVar --name timing_seconds --type Numeric
defVar --name timing_milliseconds --type Numeric
defVar --name attachments --type List --innertype String
defVar --name refundCount --type Numeric --value 0
defVar --name noRefundCount --type Numeric --value 0
defVar --name processedCount --type Numeric --value 0
defVar --name rowPassCountStr --type String
defVar --name rowPassCount --type Numeric --value 0
defVar --name retryCount --type Numeric --value 3
defVar --name columnStartCounter --type Numeric
defVar --name currentDateTime --type DateTime
defVar --name filePrefix --type String
defVar --name colIdxTicketNo --type Numeric --value 1
defVar --name colIdxPaymentType --type Numeric --value 4
defVar --name colIdxPaymentValue --type Numeric --value 5
defVar --name colIdxCode --type Numeric --value 9
defVar --name colIdxDesc --type Numeric --value 10
defVar --name colIdxTime --type Numeric --value 11
defVar --name colIdxPass --type Numeric --value 12
defVar --name rpaStatusCode --type String
defVar --name robotName --type String --value "IBM RPA Refunds Robot"
defVar --name errorMessage --type String
defVar --name windowsHost --type String
defVar --name stats --type String
defVar --name returnStatus --type String
defVar --name emailBody --type String

onError --label Main_ErrorHandler

logMessage --message "${robotName} Started" --type "Info"
startTimer stopwatch=value

getParameter --name retryCount --comment "Get the number of times a failed ticket is retried" retryCount=value

goSub --label ProcessRefunds

beginSub --name updateExcel
setVar --name "${columnStartCounter}" --value 9
getCurrentDateAndTime --localorutc "LocalTime" --comment "Get time for each record" currentDateTime=value
excelSet --value "${result_code}" --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${columnStartCounter} --comment "Set result code"
evaluate --expression "${columnStartCounter}+1" columnStartCounter=value
excelSet --value "${result_desc}" --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${columnStartCounter} --comment "Set result desc"
evaluate --expression "${columnStartCounter}+1" columnStartCounter=value
excelSet --value "${currentDateTime}" --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${columnStartCounter} --comment "Set Date and Time"
evaluate --expression "${columnStartCounter}+1" columnStartCounter=value
evaluate --expression "${rowPassCount}+1" rowPassCount=value
excelSet --value "${rowPassCount}" --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${columnStartCounter} --comment "Set number of times this row has been processed"
endSub

beginSub --name getExcelValues
excelGet --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${colIdxTicketNo} --comment "Get Ticket Number" ticket_number=value
excelGet --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${colIdxCode} --comment "Get RPA Status Code" rpaStatusCode=value
excelGet --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${colIdxPaymentType} --comment "Get Payment Type" payment_type=value
excelGet --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${colIdxPaymentValue} --comment "Get Payment Value" payment_value=value
excelGet --file ${excelFile} --getfirstsheet  --row ${tableIndex} --column ${colIdxPass} --comment "Get number of times this row has been attemted" rowPassCountStr=value
if --left "${rowPassCountStr}" --operator "Is_Null"
	setVar --name "${rowPassCount}" --value 0
else
	convertStringToNumber --text "${rowPassCountStr}" rowPassCount=value
endIf

// VALIDATE
trimString --text "${ticket_number}" --trimoption "TrimStartAndEnd" ticket_number=value
trimString --text "${payment_type}" --trimoption "TrimStartAndEnd" payment_type=value
trimString --text "${payment_value}" --trimoption "TrimStartAndEnd" payment_value=value

logMessage --message "\r\nTicket Number - ${ticket_number}\r\nStatus - ${rpa_status}\r\nStatus Code - ${rpaStatusCode}\r\nPayment Type - ${payment_type}\r\nPayment Value - ${payment_value}\r\n" --type "Info"
endSub

beginSub --name processItem
evaluate --expression "${processedCount} + 1" --comment "Row Count for Report" processedCount=value
goSub --label getExcelValues --comment "Get excel values"

if --left "${rpaStatusCode}" --operator "Is_Null_Or_Empty" --negate  --comment "Row has already been processed"
	if --left "${rpaStatusCode}" --operator "Less_Than" --right 98 --comment "Don\'t reprocess error codes less than 98"
		return
	endIf
endIf

executeScript --isfromfile  --filename "D:\\RPA\\github\\refundBot\\bot\\Refunds_ProcessSingle.wal" --parameters "in_param_ticket=${ticket_number},in_param_paymentType=${payment_type},in_param_repaymentAmt=${payment_value}" --output "out_success=${success},out_code=${result_code},out_desc=${result_desc}"

goSub --label UpdateCounters

goSub --label updateExcel

endSub

beginSub --name recordStats
getTimePart --time ${totalRunTime} --type "Minutes" timing_minutes=value
getEnvVar --name COMPUTERNAME --target "Process" windowsHost=value
getTimePart --time ${totalRunTime} --type "Seconds" timing_seconds=value
getTimePart --time ${totalRunTime} --type "Milliseconds" timing_milliseconds=value
setVar --name "${stats}" --value "Robot ${robotName} ran at host ${windowsHost}\r\nProcessed File: ${processFileName}\r\nTotal items processed - ${processedCount}\r\nRefunds Issued - ${refundCount}\r\nRefunds not issued - ${noRefundCount}\r\nRobot took ${timing_minutes} Minute(s) ${timing_seconds} Second(s) ${timing_milliseconds} Millisecond(s) " --comment "Create stats message"
endSub

beginSub --name ProcessRefunds
// process the refunds stored in a spreadsheet
logMessage --message "\r\nProcess Path - ${processPath}" --type "Info"
excelOpen --file "${processFileName}" --savechanges  retVal=success returnStatus=reason excelFile=value
if --left "${retVal}" --operator "Is_True" --negate 
	logMessage --message "Error opening Excel: ${returnStatus}" --type "Error"
	stopExecution
endIf
excelGetTable --file ${excelFile} --getfirstsheet  --entiretable  --hasheaders  fileDataTable=value fileRowCount=rows
logMessage --message "Begin processing ${fileRowCount} Rows" --type "Info" --comment "Log how many rows"
evaluate --expression "${fileRowCount}+1" --comment "Increment by 1 takes care of header" fileRowCount=value
for --variable ${tableIndex} --from 2 --to ${fileRowCount} --step 1
	goSub --label processItem
next
stopTimer --stopwatch ${stopwatch} totalRunTime=time totalHours=hours totalMinutes=minutes totalSeconds=seconds
goSub --label recordStats --comment "Record Stats"
goSub --label sendSuccessEmail --comment "Send success email"
logMessage --message "${stats}" --type "Info"
endSub

beginSub --name sendSuccessEmail
logMessage --message "Create Email Body" --type "Info"
getTimePart --time ${totalRunTime} --type "Minutes" timing_minutes=value
getTimePart --time ${totalRunTime} --type "Seconds" timing_seconds=value
getTimePart --time ${totalRunTime} --type "Milliseconds" timing_milliseconds=value
setVar --name "${emailBody}" --value "Robot finished processing\r\n${stats}\r\n\r\nPlease see attached spreadsheet for details\r\n\r\n"
logMessage --message "${emailBody}" --type "Info"
setVar --name "${attachments}" --value "[${processFileName}]"
// TODO: Send Email
endSub

beginSub --name sendErrorEmail
getTimePart --time ${totalRunTime} --type "Minutes" timing_minutes=value
getTimePart --time ${totalRunTime} --type "Seconds" timing_seconds=value
getTimePart --time ${totalRunTime} --type "Milliseconds" timing_milliseconds=value
setVar --name "${emailBody}" --value "Robot failed\r\nFile Name at fail point - ${processFileName}\r\n\r\n${errorMessage}"
logMessage --message "${emailBody}" --type "Info"
setVar --name "${attachments}" --value "[${processFileName}]"
logMessage --message "${errorMessage}" --type "Error"
// TODO: Send Email
endSub

beginSub --name UpdateCounters
if --left "${result_code}" --operator "Equal_To" --right 00 --comment "00 - Success"
	updateCounter --project Refunds --counter Success --value 1
	evaluate --expression "${refundCount} + 1" refundCount=value
	return
endIf

evaluate --expression "${noRefundCount} + 1" noRefundCount=value

if --left "${result_code}" --operator "Equal_To" --right 01 --comment "01 - invalid ticket number"
	updateCounter --project Refunds --counter InvalidTicket --value 1
elseIf --left "${result_code}" --operator "Equal_To" --right 02 --comment "02 - invalid payment type"
	updateCounter --project Refunds --counter InvalidPaymentType --value 1
elseIf --left "${result_code}" --operator "Equal_To" --right 03 --comment "03 - invalid amount"
	updateCounter --project Refunds --counter InvalidAmount --value 1
elseIf --left "${result_code}" --operator "Equal_To" --right 98 --comment "98 - Backend Error"
	updateCounter --project Refunds --counter BackendError --value 1
elseIf --left "${result_code}" --operator "Equal_To" --right 99 --comment "99 - Bor Error"
	updateCounter --project Refunds --counter BotError --value 1
endIf
endSub

beginSub --name getErrorMessage
getEnvVar --name COMPUTERNAME --target "Process" windowsHost=value
setVar --name "${errorMessage}" --value "An error occurred in RPA Robot.\r\nRobot Name: ${robotName}\r\nWindows Host: ${windowsHost}\r\nError Message: ${wdg:errorMessage}\r\nSubroutine: ${wdg:errorSubName}\r\nLine Number: ${wdg:lineNumber}"
endSub

beginSub --name Main_ErrorHandler
goSub --label getErrorMessage
goSub --label sendErrorEmail
endSub"	ÆÍðØÖ™@¸ýZ@÷ÓP*21.0.1.0